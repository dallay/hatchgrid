{
  "enabled": true,
  "name": "Source to Docs Sync",
  "description": "Monitors all source files in the repository and triggers documentation updates in README or docs folder when changes are detected",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.kt",
      "**/*.ts",
      "**/*.vue",
      "**/*.astro",
      "**/*.js",
      "**/*.mjs",
      "**/*.gradle.kts",
      "**/*.json",
      "**/*.yml",
      "**/*.yaml",
      "**/*.sql"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Source files have been modified. Please review the changes and update the documentation accordingly. Focus on:\n\n1. Update the main README.md if core functionality, setup instructions, or project structure has changed\n2. Update relevant documentation in the /docs folder for specific features or components\n3. Ensure API documentation reflects any endpoint changes\n4. Update any architectural diagrams or technical specifications\n5. Review and update code examples in documentation\n6. Ensure that the /docs are updated\n\nDocumentation Guidelines:\n- All documentation must be written in English.\n- Documentation files (except for project-level README.md) must be placed inside the /docs folder at the root of the project.\n- Each new documentation .md file should be placed in its corresponding subfolder within /docs (e.g., conventions, authentication, frontend, landing, etc.) according to its topic.\n- The /docs folder is the canonical source of truth for all project documentation, conventions, and technical specifications.\n- Every change to behavior, APIs, architecture, or configuration must be reflected in /docs.\n- Use markdown and commit with relevant PRs.\n- Refer to this folder as the canonical reference for devs and agents.\n- For any unclear or missing conventions, open a PR to /docs/conventions and update this file.\n\nAI Agent Usage Guidelines:\n- Respect the architectural choices (reactive, modular, OAuth2-secured)\n- Apply consistent coding conventions (documented above)\n- Prioritize security, performance, and testability\n- Suggest changes that do not break existing tests or architecture\n- Refuse to produce logic without corresponding test stubs\n- Propose changes only if the required checks and builds can pass\n\nMerge Checklist:\n- [ ] Tests written and passing\n- [ ] Builds passing (pnpm and Gradle)\n- [ ] /docs updated if relevant\n- [ ] Code format and lint clean\n- [ ] Secure, modular, and extensible\n"
  }
}
