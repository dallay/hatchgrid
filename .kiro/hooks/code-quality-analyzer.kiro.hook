{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and provides automated code quality analysis including code smells, design patterns, and best practices suggestions",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.kt",
      "**/*.ts",
      "**/*.vue",
      "**/*.astro",
      "**/*.js",
      "**/*.tsx",
      "**/*.jsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code files for potential improvements. Focus on:\n\n1. **Code Smells**: Identify long methods, large classes, duplicate code, complex conditionals, and other maintainability issues\n2. **Design Patterns**: Suggest appropriate design patterns that could improve the code structure\n3. **Best Practices**: Check for adherence to language-specific and framework-specific best practices including:\n   - Kotlin: Idiomatic Kotlin usage, null safety, coroutines best practices\n   - TypeScript/Vue: Type safety, composition API usage, reactive patterns\n   - Spring Boot: Reactive programming patterns, dependency injection, security practices\n4. **Performance**: Identify potential performance bottlenecks and optimization opportunities\n5. **Readability**: Suggest improvements for variable naming, method structure, and code organization\n6. **Maintainability**: Recommend refactoring opportunities to reduce complexity and improve testability\n\nProvide specific, actionable suggestions while maintaining the existing functionality. Consider the project's tech stack (Spring Boot WebFlux, Vue 3, TypeScript, Kotlin) and architectural patterns when making recommendations."
  }
}