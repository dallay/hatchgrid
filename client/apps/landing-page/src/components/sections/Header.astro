---
import Brand from "@/components/Brand.astro";
import NavMenus from "@/components/NavMenus.vue";
import { type Lang, useTranslations } from "@/i18n";
import { headerMenuItems } from "@/models/menu/menu.constants";
import ThemeToggle from "@/components/ThemeToggle.astro";
import LocaleSelect from "@/components/i18n/LocaleSelect.astro";
import Link from "@/components/Link.astro";
import { cn } from "@/lib/utils";
import { buttonVariants } from "../ui/button";

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang); // Still needed for {t("header.cta")}
const currentPath = Astro.url.pathname;
---

<header id="main-header" class="flex w-full items-center gap-6 px-4 lg:px-20 py-4 sticky top-0 left-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 transition-all duration-300">
  <!-- Brand Section - Takes up flexible space on the left -->
  <div class="flex flex-col items-start gap-2.5 relative flex-1 grow">
    <Brand/>
  </div>

  <!-- Navigation Menu - Centered -->
  <div class="hidden lg:flex items-center justify-center">
    <NavMenus
      client:only="vue"
      menuItems={headerMenuItems}
      lang={lang}
      currentPath={currentPath}
    />
  </div>

  <!-- Action Section - Right side with controls and buttons -->
  <div class="flex items-center justify-end gap-4 relative flex-1 grow">
    <!-- Theme and Locale controls -->
    <div class="hidden lg:flex items-center gap-2">
      <ThemeToggle/>
      <LocaleSelect />
    </div>

    <!-- CTA Button -->
    <div class="hidden lg:flex items-center">
      <Link href="https://codary.tech"
         target="_blank"
         rel="noopener noreferrer"
         class={cn(buttonVariants({ variant: 'default', size: 'default' }))}
         >
        {t("header.cta")}
      </Link>
    </div>

    <!-- Mobile menu button -->
    <button data-collapse-toggle="mobile-menu-2" type="button"
            class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg lg:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
            aria-controls="mobile-menu-2" aria-expanded="false">
      <span class="sr-only">Open main menu</span>
      <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"
           xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd"
              d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
              clip-rule="evenodd"></path>
      </svg>
      <svg class="hidden w-6 h-6" fill="currentColor" viewBox="0 0 20 20"
           xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
      </svg>
    </button>
  </div>

  <!-- Mobile menu -->
  <div class="hidden absolute top-full left-0 w-full bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 lg:hidden"
       id="mobile-menu-2">
    <div class="px-4 py-6 space-y-4">
      <NavMenus
        client:only="vue"
        menuItems={headerMenuItems}
        lang={lang}
        currentPath={currentPath}
      />
      <div class="flex flex-col gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
        <div class="flex items-center gap-3">
          <ThemeToggle/>
          <LocaleSelect />
        </div>
        <div class="flex flex-col gap-2">
          <a href="https://codary.tech/login"
             target="_blank"
             rel="noopener noreferrer"
             class="inline-flex items-center justify-center h-12 px-7 py-4 border-2 border-primary-600 bg-transparent text-primary-600 font-medium text-sm rounded-none">
            Log In
          </a>
          <a href="https://codary.tech"
             target="_blank"
             rel="noopener noreferrer"
             class="inline-flex items-center justify-center h-12 px-7 py-4 bg-primary-600 border-2 border-primary-600 text-white font-medium text-sm rounded-none">
            {t("header.cta")}
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Add a spacer to prevent content from being hidden under the sticky header -->
<div id="header-spacer" class="h-[76px]"></div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('main-header');
    let ticking = false;

    const handleScroll = () => {
      // Using requestAnimationFrame for better performance
      if (!ticking) {
        window.requestAnimationFrame(() => {
          const currentScrollY = window.scrollY;

          // Add/remove blur effect based on scroll position
          if (currentScrollY > 10) {
            header?.classList.add('bg-white/95', 'dark:bg-gray-800/95', 'backdrop-blur-md', 'shadow-sm');
            header?.classList.remove('bg-white', 'dark:bg-gray-800');
          } else {
            header?.classList.remove('bg-white/95', 'dark:bg-gray-800/95', 'backdrop-blur-md', 'shadow-sm');
            header?.classList.add('bg-white', 'dark:bg-gray-800');
          }

          ticking = false;
        });

        ticking = true;
      }
    };

    // Use passive event listener for better performance
    window.addEventListener('scroll', handleScroll, { passive: true });

    // Clean up on navigation/hmr
    window.addEventListener('astro:before-swap', () => {
      window.removeEventListener('scroll', handleScroll);
    });

    // Initialize on page load
    handleScroll();

    // Mobile menu toggle functionality
    const mobileMenuButton = document.querySelector('[data-collapse-toggle="mobile-menu-2"]');
    const mobileMenu = document.getElementById('mobile-menu-2');

    mobileMenuButton?.addEventListener('click', () => {
      const isHidden = mobileMenu?.classList.contains('hidden');
      if (isHidden) {
        mobileMenu?.classList.remove('hidden');
        mobileMenuButton?.setAttribute('aria-expanded', 'true');
      } else {
        mobileMenu?.classList.add('hidden');
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
      }
    });

    // Close mobile menu when clicking outside
    document.addEventListener('click', (event) => {
      const target = event.target as Element;
      if (!header?.contains(target)) {
        mobileMenu?.classList.add('hidden');
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
      }
    });
  });
</script>
