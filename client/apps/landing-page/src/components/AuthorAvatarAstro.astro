---
import type Author from "@/models/author/author.model";
import { formatDate } from "@hatchgrid/utilities";

export interface Props {
    author?: Author;
    date?: Date;
    size?: 'sm' | 'md' | 'lg';
}

const { author, date, size = 'md' } = Astro.props;

const getInitials = (name: string): string => {
    if (!name) return "";
    const names = name.trim().split(/\s+/);
    if (names.length === 1) return names[0].substring(0, 2).toUpperCase();
    return names[0][0].toUpperCase() + names[names.length - 1][0].toUpperCase();
};

// Clases basadas en el tama√±o
const sizeClasses = {
    sm: 'h-8 w-8',
    md: 'h-10 w-10',
    lg: 'h-12 w-12'
};

const textSizes = {
    sm: { name: 'text-sm font-semibold', bio: 'text-xs text-gray-500' },
    md: { name: 'font-semibold text-gray-800', bio: 'text-xs text-gray-500' },
    lg: { name: 'text-base font-semibold text-gray-800', bio: 'text-sm text-gray-500' }
};

const avatarClasses = `${sizeClasses[size]} mr-3 relative flex shrink-0 overflow-hidden rounded-full border border-gray-200 bg-gray-100`;
const nameClasses = textSizes[size].name;
const bioClasses = textSizes[size].bio;
---

{author && (
    <div class="flex items-center mb-2 sm:mb-0">
        <div class={avatarClasses}>
            {author.avatar ? (
                <img
                    src={author.avatar}
                    alt={author.name}
                    class="aspect-square h-full w-full object-cover"
                />
            ) : (
                <div class="flex h-full w-full items-center justify-center bg-gray-200 text-gray-600 font-medium text-sm">
                    {getInitials(author.name)}
                </div>
            )}
        </div>
        <div>
            <p class={nameClasses}>{author.name}</p>
            {author.bio && (
                <p class={bioClasses}>{author.bio}</p>
            )}
            {date && (
                <p class="text-xs text-gray-400 mt-1">{formatDate(date)}</p>
            )}
        </div>
    </div>
)}
