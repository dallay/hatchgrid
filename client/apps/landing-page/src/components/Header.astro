---
import Brand from '@/components/Brand.astro'
import ThemeToggle from "./ThemeToggle.astro";
import LocaleSelect from "./i18n/LocaleSelect.astro";
import { type Lang, useTranslations, useTranslatedPath } from '@/i18n';
import { headerMenuItems } from '@/models/menu/menu.constants';

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
const currentPath = Astro.url.pathname;
---

<header id="main-header" class="fixed top-0 left-0 right-0 z-40 transition-all duration-300">
  <nav
      class="bg-white dark:bg-gray-800 border-gray-200 px-4 lg:px-6 py-2.5 transition-all duration-300">
    <div class="flex flex-wrap justify-between items-center mx-auto max-w-screen-xl">
      <Brand/>
      <div class="flex items-center lg:order-2">
        <ThemeToggle/>
        <LocaleSelect />
        <a href="#"
        type="button"
        class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 lg:px-5 py-2 lg:py-2.5 mr-2 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
          {t("header.cta")}
        </a>
        <button data-collapse-toggle="mobile-menu-2" type="button"
                class="inline-flex items-center p-2 ml-1 text-sm text-gray-500 rounded-lg lg:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
                aria-controls="mobile-menu-2" aria-expanded="false">
          <span class="sr-only">Open main menu</span>
          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"
               xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd"
                  d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                  clip-rule="evenodd"></path>
          </svg>
          <svg class="hidden w-6 h-6" fill="currentColor" viewBox="0 0 20 20"
               xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd"
                  d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                  clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
      <div class="hidden justify-between items-center w-full lg:flex lg:w-auto lg:order-1"
           id="mobile-menu-2">
        <ul class="flex flex-col mt-4 font-medium lg:flex-row lg:space-x-8 lg:mt-0">
          {headerMenuItems.map(item => {
            if (!item.condition) return null;

            if (item.type === 'link') {
              const isActive = currentPath === translatePath(item.href);
              const activeClass = isActive
                ? "text-white rounded bg-primary-700 lg:bg-transparent lg:text-primary-700 lg:p-0 dark:text-white"
                : "text-gray-700 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0 dark:text-gray-400 lg:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white lg:dark:hover:bg-transparent dark:border-gray-700";

              return (
                <li>
                  <a href={translatePath(item.href)}
                     class={`block py-2 pr-4 pl-3 ${activeClass}`}
                     aria-current={isActive ? "page" : undefined}>
                    {t(item.translationKey)}
                  </a>
                </li>
              );
            }

            if (item.type === 'dropdown') {
              return (
                <li class="relative group">
                  <button class="flex items-center py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0 dark:text-gray-400 lg:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white lg:dark:hover:bg-transparent dark:border-gray-700">
                    {t(item.translationKey)}
                    <svg class="w-4 h-4 ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                  </button>
                  <div class="absolute hidden group-hover:block lg:pt-2 z-10 w-44 bg-white rounded-lg shadow-lg dark:bg-gray-700">
                    <ul class="py-1">
                      {item.children?.map(child => {
                        if (!child.condition) return null;

                        // Make sure we only access href on link type children
                        if (child.type === 'link') {
                          return (
                            <li>
                              <a href={translatePath(child.href)}
                                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                                {t(child.translationKey)}
                              </a>
                            </li>
                          );
                        }

                        // Handle nested dropdown if needed (optional)
                        // This handles the case where a dropdown might have another dropdown as a child
                        if (child.type === 'dropdown') {
                          return (
                            <li>
                              <span class="block px-4 py-2 text-sm font-medium text-gray-900 dark:text-white">
                                {t(child.translationKey)}
                              </span>
                            </li>
                          );
                        }

                        return null;
                      })}
                    </ul>
                  </div>
                </li>
              );
            }

            return null;
          })}
        </ul>
      </div>
    </div>
  </nav>
</header>

<!-- Add a spacer to prevent content from being hidden under the fixed header -->
<div id="header-spacer" class="h-[60px]"></div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('main-header');
    const nav = header?.querySelector('nav');
    let lastScrollY = window.scrollY;
    let ticking = false;

    const handleScroll = () => {
      // Using requestAnimationFrame for better performance
      if (!ticking) {
        window.requestAnimationFrame(() => {
          const currentScrollY = window.scrollY;
          const scrollingDown = currentScrollY > lastScrollY;

          // Add/remove blur effect based on scroll position
          if (currentScrollY > 10) {
            nav?.classList.add('bg-white/90', 'dark:bg-gray-800/90', 'backdrop-blur-md', 'shadow-md');
            nav?.classList.remove('bg-white', 'dark:bg-gray-800');
          } else {
            nav?.classList.remove('bg-white/90', 'dark:bg-gray-800/90', 'backdrop-blur-md', 'shadow-md');
            nav?.classList.add('bg-white', 'dark:bg-gray-800');
          }

          // Show/hide header based on scroll direction
          if (scrollingDown && currentScrollY > 60) {
            header?.classList.add('-translate-y-full');
          } else {
            header?.classList.remove('-translate-y-full');
          }

          lastScrollY = currentScrollY;
          ticking = false;
        });

        ticking = true;
      }
    };

    // Use passive event listener for better performance
    window.addEventListener('scroll', handleScroll, { passive: true });

    // Initialize on page load
    handleScroll();
  });
</script>
