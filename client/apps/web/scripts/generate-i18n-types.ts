import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const I18N_DIR = path.resolve(__dirname, "../src/i18n");
const OUTPUT_FILE = path.resolve(__dirname, "../src/types/i18n.d.ts");

/**
 * Recursively processes a directory to find all JSON translation files.
 * @param dir - The directory to process.
 * @returns A promise that resolves to an array of file paths.
 */
async function getTranslationFiles(dir: string): Promise<string[]> {
	let files: string[] = [];
	const entries = await fs.readdir(dir, { withFileTypes: true });

	for (const entry of entries) {
		const fullPath = path.resolve(dir, entry.name);
		if (entry.isDirectory()) {
			files = files.concat(await getTranslationFiles(fullPath));
		} else if (entry.isFile() && entry.name.endsWith(".json")) {
			files.push(fullPath);
		}
	}

	return files;
}

/**
 * Generates a union type of all keys from a JSON object.
 * @param json - The JSON object to process.
 * @param prefix - The current prefix for nested keys.
 * @returns A string representing the union type of keys.
 */
function generateKeysType(json: object, prefix = ""): string {
	let keys: string[] = [];
	for (const key in json) {
		if (Object.hasOwn(json, key)) {
			const newKey = prefix ? `${prefix}.${key}` : key;
			keys.push(`"${newKey}"`);

			// @ts-ignore
			const value = json[key];
			if (typeof value === "object" && value !== null) {
				keys = keys.concat(generateKeysType(value, newKey));
			}
		}
	}
	return keys.join(" | ");
}

/**
 * Main function to generate i18n types.
 */
async function generateTypes() {
	try {
		console.log("Starting i18n type generation...");

		const files = await getTranslationFiles(I18N_DIR);
		if (files.length === 0) {
			console.warn(
				"No JSON translation files found. Skipping type generation.",
			);
			return;
		}

		const allKeys = new Set<string>();

		for (const file of files) {
			const content = await fs.readFile(file, "utf-8");
			const json = JSON.parse(content);
			const keys = generateKeysType(json).split(" | ");
			keys.forEach((key) => allKeys.add(key));
		}

		const typeContent = `// This file is auto-generated by scripts/generate-i18n-types.ts
// Do not edit this file directly.

export type TranslationKey = ${Array.from(allKeys).join(" | ")};
`;

		await fs.mkdir(path.dirname(OUTPUT_FILE), { recursive: true });
		await fs.writeFile(OUTPUT_FILE, typeContent, "utf-8");

		console.log(`Successfully generated i18n types at ${OUTPUT_FILE}`);
	} catch (error) {
		console.error("Error generating i18n types:", error);
		process.exit(1);
	}
}

generateTypes();
